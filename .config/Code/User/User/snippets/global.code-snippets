{
	"arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "arrow",
		"body": [
			"($param) => {",
			"  $0",
			"}"
		]
	},
	"const arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "carrow",
		"body": [
			"const $method = ($param) => {",
			"  $0",
			"}"
		]
	},
	"const async arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "csarrow",
		"body": [
			"const $method = async ($param) => {",
			"  $0",
			"}"
		]
	},
	"export const arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "xarrow",
		"body": [
			"export const $method = ($param) => {",
			"  $0",
			"}"
		]
	},
	"export deafult const arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "darrow",
		"body": [
			"const $method = ($param) => {",
			"  // $body",
			"}",
			"",
			"export default $method",
			""
		]
	},
	"export deafult const async arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "dsarrow",
		"body": [
			"const $method = async ($param) => {",
			"  // $body",
			"}",
			"",
			"export default $method",
			""
		]
	},
	"export const async arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "xsarrow",
		"body": [
			"export const $method = async ($param) => {",
			"  // $body",
			"}",
			"",
		]
	},
	"export default const async arrow function": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "dsarrow",
		"body": [
			"export const $method = async ($param) => {",
			"  // $body",
			"}",
			"",
			"export default $method",
			""
		]
	},
	"export deafult constant": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "dcon",
		"body": [
			"const $1 = $2;",
			"",
			"export default $1",
			""
		]
	},
	"export constant": {
		"scope": "javascript,typescript,jsx,tsx",
		"prefix": "xcon",
		"body": [
			"export const $1 = $2;",
			"",
		]
	},
	"Pinia Options Store Boilerplate": {
		"scope": "javascript,typescript",
		"prefix": "pinia-options",
		"body": [
			"import { defineStore, acceptHMRUpdate } from 'pinia'",
			"",
			"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {",
			" state: () => ({",
			"   $0",
			" }),",
			" getters: {},",
			" actions: {},",
			"})",
			"",
			"if (import.meta.hot) {",
			" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
			"}",
			""
		],
		"description": "Bootstrap the code needed for a Vue.js Pinia Options Store file"
	},
	"Pinia Setup Store Boilerplate": {
		"scope": "javascript,typescript",
		"prefix": "pinia-setup",
		"body": [
			"import { defineStore, acceptHMRUpdate } from 'pinia'",
			"",
			"export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
			" $0",
			" return {}",
			"})",
			"",
			"if (import.meta.hot) {",
			" import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
			"}",
			""
		],
		"description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file"
	},
	"Define props in typescript": {
		"scope": "javascript,typescript,vue",
		"prefix": "v-props",
		"body": [
			"const props = defineProps<{",
			"  $1: $2;",
			"$3",
			"}>();"
		],
		"description": "Defines a prop with typescript"
	},
	"Define props with defaults in typescript": {
		"scope": "javascript,typescript,vue",
		"prefix": "v-dprops",
		"body": [
			"const props = withDefaults(",
			"   defineProps<{",
			"     $1: $2;",
			"   }>(),",
			"   { $1: $3 }",
			");"
		],
		"description": "Defines a prop with typescript"
	},
	"Define pageProps Interface in typescript": {
		"scope": "javascript,typescript,vue",
		"prefix": "v-iprops",
		"body": [
			"interface PageProps {",
			"  $1: $2;",
			"  [key: string]: any;",
			"}",
			""
		],
		"description": "Defines a prop with typescript"
	},
	"watercss cdn": {
		"scope": "javascript,typescript,vue, html, blade",
		"prefix": "water",
		"body": [
			"<link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/water.css@2/out/$dark.css' />"
		],
		"description": "watercss cdn, options water, dark, light"
	},
	"pphp": {
		"scope": "html",
		"prefix": "pphp",
		"body": [
			"<?= $1 ?>"
		],
	},
	"PHP Skeleton": {
		"scope": "html",
		"prefix": "ps",
		"body": [
			"<?php",
			"",
			"declare(strict_types=1);",
			"",
			""
		],
		"description": "php file with strict_types skeleton"
	}
}
