{
  "comment": {
    "prefix": "com",
    "body": [
      "$LINE_COMMENT --- ${1:comment} --- $LINE_COMMENT"
    ],
    "description": "Adds a nicely formatted comment"
  },
  "Multiline Comment": {
    "prefix": "mcom",
    "body": [
      "$BLOCK_COMMENT_START",
      "\t${0:comment}",
      "$BLOCK_COMMENT_END"
    ],
    "description": "Adds a nicely formatted multiline comment"
  },
  "Todo Comment": {
    "prefix": "todo",
    "body": [
      "$LINE_COMMENT TODO: $0"
    ],
    "description": "Adds a nicely formatted todo comment"
  },
  "Fixme Comment": {
    "prefix": "fixme",
    "body": [
      "$LINE_COMMENT FIXME: $0"
    ],
    "description": "Adds a nicely formatted fixme comment"
  },
  "Alert Comment": {
    "prefix": "alert",
    "body": [
      "$LINE_COMMENT!: $0"
    ],
    "description": "Adds a nicely formatted alert comment"
  },
  "Note Comment": {
    "prefix": "note",
    "body": [
      "$LINE_COMMENT*: $0"
    ],
    "description": "Adds a nicely formatted note comment"
  },
  "Query Comment": {
    "prefix": "query",
    "body": [
      "$LINE_COMMENT?: $0"
    ],
    "description": "Adds a nicely formatted query comment"
  },
  "Cancelled Comment": {
    "prefix": "cancelled",
    "body": [
      "$LINE_COMMENT$LINE_COMMENT: $0"
    ],
    "description": "Adds a nicely formatted cancelled comment"
  },
  "Array": {
    "prefix": "arr",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": [
      "[${1:value}, ${2:value}, $3];"
    ],
    "description": "Array []"
  },
  "array": {
    "prefix": "arr",
    "scope": "c,cpp",
    "body": [
      "{${1:value}, ${2:value}, $3};"
    ],
    "description": "Array {}"
  },
  "Array ... value": {
    "prefix": "va",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python,c,cpp,cs",
    "body": [
      "${1:value}, "
    ],
    "description": "Array value statement"
  },
  "If block": {
    "prefix": "if",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If  block"
  },
  "If single line": {
    "prefix": "sif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) ${2:code}"
    ],
    "description": "If single line"
  },
  "If ... else": {
    "prefix": "ifel",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If else block"
  },
  "If ... else single line": {
    "prefix": "sifel",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else (${3:condition}) ${4:code}"
    ],
    "description": "If ... else single line"
  },
  "If ... elseif ... else": {
    "prefix": "ifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else if (${3:condition}) {",
      "\t${4:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If elseif else block"
  },
  "If ... elseif ... else single line": {
    "prefix": "sifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else if (${3:condition}) ${4:code}",
      "else (${5:condition}) ${6:code}"
    ],
    "description": "If ... elseif ... else single line"
  },
  "Switch block": {
    "prefix": "sw",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "switch (${1:variable}) {",
      "\tcase ${2:label}:",
      "\t\t${3:// code...}",
      "\t\tbreak;",
      "\tcase ${4:label}:",
      "\t\t${5:// code...}",
      "\t\tbreak;$6",
      "\tdefault:",
      "\t\t${0:// code...}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch block"
  },
  "Case statement": {
    "prefix": "cs",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "case ${1:label}:",
      "\t${2:// code...}",
      "\t${3|break,return|};"
    ],
    "description": "Case addon block"
  },
  "Ternary operator": {
    "prefix": "tern",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "${1:condition} ? ${2:if_true} : ${3:if_false};"
    ],
    "description": "Ternary statement"
  },
  "Try ... catch": {
    "prefix": "tryc",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}"
    ],
    "description": "Try catch block"
  },
  "Try ... catch ... finally": {
    "prefix": "tryf",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}$5 finally {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "Try catch finally block"
  },
  "Catch": {
    "prefix": "cat",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp",
    "body": [
      "catch (${2:e}) {",
      "\t${3:// code...}",
      "}"
    ],
    "description": "Catch block"
  },
  "Finally": {
    "prefix": "fy",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp",
    "body": [
      "finally {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "Finally block"
  },
  "Throw new Exception": {
    "prefix": "thr",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp",
    "body": [
      "throw new ${1:Exception}(\"${2:Error statement}\");"
    ],
    "description": "Throw new exception statement"
  },
  "function": {
    "prefix": "fun",
    "scope": "c,cpp,cs",
    "body": [
      "",
      "${1:void} ${2:functionName}($3) {",
      "\t${0://body}",
      "}"
    ]
  },
  "arrow function": {
    "prefix": "arrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "($param) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "const arrow function": {
    "prefix": "carrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const $method = ($param) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "const async arrow function": {
    "prefix": "csarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const $method = async ($param) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export const arrow function": {
    "prefix": "xarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const $method = ($param) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export deafult const arrow function": {
    "prefix": "darrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const $method = ($param) => {",
      "\t${0://body}",
      "}",
      "",
      "export default $method;",
      ""
    ]
  },
  "export deafult const async arrow function": {
    "prefix": "dsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const $method = async ($param) => {",
      "\t${0://body}",
      "}",
      "",
      "export default $method;",
      ""
    ]
  },
  "export const async arrow function": {
    "prefix": "xsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const $method = async ($param) => {",
      "\t${0://body}",
      "}",
      "",
      "export default $method;",
      ""
    ]
  },
  "export deafult constant": {
    "prefix": "dcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const $1 = $2;",
      "",
      "export default $1;",
      ""
    ]
  },
  "export constant": {
    "prefix": "xcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const $1 = $2;",
      ""
    ]
  },
  "watercss cdn": {
    "scope": "vue,html,blade",
    "prefix": "water",
    "body": [
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/water.css@2/out/${1|dark,light,water|}.css\"",
      "/>"
    ],
    "description": "watercss cdn, options water, dark, light"
  },
  "pico css cdn": {
    "scope": "vue,html,blade",
    "prefix": "pico",
    "body": [
      "<meta name=\"color-scheme\" content=\"light dark\">",
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"",
      "/>"
    ],
    "description": "pico css cdn"
  },
  "For loop": {
    "prefix": "for",
    "scope": "c,cpp,cs",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:n}; ${2:i}++) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "For Loop": {
    "prefix": "for",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "for (let ${2:i} = ${3:0}; ${2:i} < ${4:n}; ${2:i}++) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "While loop": {
    "prefix": "while",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "while (${1:variable} ${2|<,<=,>,>=,==,!=|} ${3:n}) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "While loop"
  },
  "Do ... while": {
    "prefix": "dowl",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs",
    "body": [
      "do {",
      "\t${0:// code...}",
      "} while (${1:variable} ${2|<,<=,>,>=,==,!=|} ${3:n});"
    ],
    "description": "Do while loop"
  },
  "Object key ... value": {
    "prefix": "obj",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": [
      "{",
      "\t\"${1:key}\": ${2:value},",
      "\t\"${3:key}\": ${4:value},$5",
      "}"
    ],
    "description": "Object key: value block"
  },
  "Key ... value": {
    "prefix": "kv",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": [
      "\"${1:key}\": ${2:value},"
    ],
    "description": "key => value statement"
  },
  "rfc": {
    "prefix": "rfc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "$0"
    ]
  },
  "rafc": {
    "prefix": "rafc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      "$0"
    ]
  },
  "bash-skeleton": {
    "prefix": "bash",
    "scope": "shellscript,bash",
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -euo pipefail",
      "",
      "trap 'exit 1' SIGUSR1",
      "",
      "# ----  Main script logic ---- #",
      "",
      "$0"
    ]
  },
  "argparse": {
    "prefix": "argparse",
    "scope": "shellscript",
    "body": "source argparse.sh",
    "description": "source argparse library"
  },
  "description": {
    "prefix": "desc",
    "scope": "shellscript",
    "body": "set_description ${1:description}",
    "description": "add description"
  },
  "defarg": {
    "prefix": "defarg",
    "scope": "shellscript",
    "body": "define_arg \"${1:name}\" \"${2|\"\",default|}\" \"${3|\"\",description|}\" \"${4|string,bool|}\" \"${5|optional,required|}\"",
    "description": "define an argument"
  },
  "help": {
    "prefix": "help",
    "scope": "shellscript",
    "body": "check_for_help \"$@\"",
    "description": "check for help"
  },
  "parseargs": {
    "prefix": "help",
    "scope": "shellscript",
    "body": "parse_args \"$@\"",
    "description": "parse the args"
  },
  "full argparse": {
    "prefix": "fargparse",
    "scope": "shellscript",
    "body": [
      "# ---- Source the argparse script ---- #",
      "source argparse.sh",
      "",
      "set_description \"This is a simple script that greets the user.\"",
      "",
      "# ----  Define an argument ---- #",
      "define_arg \"name\" \"\" \"Name of the user\" \"string\" \"required\"",
      "",
      "# ----  Check for help (-h, --help) ---- #",
      "check_for_help \"$@\"",
      "",
      "# ----  Parse the arguments ---- #",
      "parse_args \"$@\"",
      "",
      "# ----  Main script logic ---- #",
      ""
    ]
  }
}
