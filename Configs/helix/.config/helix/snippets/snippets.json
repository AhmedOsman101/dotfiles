{
  "comment": {
    "prefix": "comment",
    "body": ["$LINE_COMMENT --- ${1:comment} --- $LINE_COMMENT"],
    "description": "Adds a nicely formatted comment"
  },
  "Multiline Comment": {
    "prefix": "mcomment",
    "body": ["$BLOCK_COMMENT_START", "\t${0:comment}", "$BLOCK_COMMENT_END"],
    "description": "Adds a nicely formatted multiline comment"
  },
  "Todo Comment": {
    "prefix": "todo",
    "body": ["$LINE_COMMENT TODO: $0"],
    "description": "Adds a nicely formatted todo comment"
  },
  "Fixme Comment": {
    "prefix": "fixme",
    "body": ["$LINE_COMMENT FIXME: $0"],
    "description": "Adds a nicely formatted fixme comment"
  },
  "Alert Comment": {
    "prefix": "alert",
    "body": ["$LINE_COMMENT!: $0"],
    "description": "Adds a nicely formatted alert comment"
  },
  "Note Comment": {
    "prefix": "note",
    "body": ["$LINE_COMMENT NOTE: $0"],
    "description": "Adds a nicely formatted note comment"
  },
  "Query Comment": {
    "prefix": "query",
    "body": ["$LINE_COMMENT ?: $0"],
    "description": "Adds a nicely formatted query comment"
  },
  "Deprecated Comment": {
    "prefix": "deprecated",
    "body": ["$LINE_COMMENT DEPRECATED: $0"],
    "description": "Adds a nicely formatted deprecated comment"
  },
  "Array": {
    "prefix": "array",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python,php",
    "body": ["[ ${1:value}, ${2:value}, $3 ];"],
    "description": "Array []"
  },
  "array": {
    "prefix": "array",
    "scope": "c,cpp",
    "body": ["{ ${1:value}, ${2:value}, $3 };"],
    "description": "Array {}"
  },
  "Array ... value": {
    "prefix": "value",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python,c,cpp,cs,php",
    "body": ["${1:value}, "],
    "description": "Array value statement"
  },
  "If block": {
    "prefix": "if",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["if (${1:condition}) {", "\t${0:// code...}", "}"],
    "description": "If  block"
  },
  "If single line": {
    "prefix": "sif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["if (${1:condition}) ${2:code}"],
    "description": "If single line"
  },
  "If ... else": {
    "prefix": "ifelse",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If else block"
  },
  "If ... else single line": {
    "prefix": "sifelse",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else (${3:condition}) ${4:code}"
    ],
    "description": "If ... else single line"
  },
  "If ... elseif ... else": {
    "prefix": "ifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else if (${3:condition}) {",
      "\t${4:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If elseif else block"
  },
  "If ... elseif ... else single line": {
    "prefix": "sifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else if (${3:condition}) ${4:code}",
      "else (${5:condition}) ${6:code}"
    ],
    "description": "If ... elseif ... else single line"
  },
  "Switch block": {
    "prefix": "switch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "switch (${1:variable}) {",
      "\tcase ${2:label}:",
      "\t\t${3:// code...}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${0:// code...}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch block"
  },
  "Case statement": {
    "prefix": "case",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["case ${1:label}:", "\t${2:// code...}", "\t${3|break,return|};"],
    "description": "Case addon block"
  },
  "Ternary operator": {
    "prefix": "ternary",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["${1:condition} ? ${2:if_true} : ${3:if_false};"],
    "description": "Ternary statement"
  },

  "Try ... catch": {
    "prefix": "trycatch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}"
    ],
    "description": "Try catch block"
  },
  "Try ... catch ... finally": {
    "prefix": "tryfinally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}$5 finally {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "Try catch finally block"
  },
  "Catch": {
    "prefix": "catch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["catch (${2:e}) {", "\t${3:// code...}", "}"],
    "description": "Catch block"
  },
  "Finally": {
    "prefix": "finally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["finally {", "\t${0:// code...}", "}"],
    "description": "Finally block"
  },
  "Throw new Exception": {
    "prefix": "throw",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["throw new ${1:Exception}(\"${2:Error statement}\");"],
    "description": "Throw new exception statement"
  },
  "functionC": {
    "prefix": "function",
    "scope": "c,cpp,cs",
    "body": ["", "${1:void} ${2:functionName}($3) {", "\t${0://body}", "}"]
  },
  "arrow function": {
    "prefix": "arrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["(${1:param}) => {", "\t${0://body}", "}"]
  },
  "const arrow function": {
    "prefix": "carrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["const ${1:method} = (${2:param}) => {", "\t${0://body}", "}"]
  },
  "const async arrow function": {
    "prefix": "csarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export const arrow function": {
    "prefix": "xarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const ${1:method} = (${2:param}) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export deafult const arrow function": {
    "prefix": "darrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export deafult const async arrow function": {
    "prefix": "dsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export const async arrow function": {
    "prefix": "xsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export deafult constant": {
    "prefix": "dcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["const ${1:var} = $2;", "", "export default ${1:var};", ""]
  },
  "export constant": {
    "prefix": "xcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["export const $1 = $2;", ""]
  },
  "watercss cdn": {
    "scope": "vue,html,blade",
    "prefix": "water",
    "body": [
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/water.css@2/out/${1|dark,light,water|}.css\"",
      "/>"
    ],
    "description": "watercss cdn, options water, dark, light"
  },
  "pico css cdn": {
    "scope": "vue,html,blade",
    "prefix": "pico",
    "body": [
      "<meta name=\"color-scheme\" content=\"light dark\">",
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"",
      "/>"
    ],
    "description": "pico css cdn"
  },
  "For loop": {
    "prefix": "for",
    "scope": "c,cpp,cs",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:n}; ${2:i}++) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "For Loop": {
    "prefix": "for",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "for (let ${1:i} = ${2:0}; ${3:condition}; ${1:i}${4:++}) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "While loop": {
    "prefix": "while",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["while (${1:condition}) {", "\t${0:// code...}", "}"],
    "description": "While loop"
  },
  "Do ... while": {
    "prefix": "dowhile",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["do {", "\t${0:// code...}", "} while (${1:condition})"],
    "description": "Do while loop"
  },
  "Object key ... value": {
    "prefix": "obj",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": [
      "{",
      "\t\"${1:key}\": ${2:value},",
      "\t\"${3:key}\": ${4:value},$5",
      "}"
    ],
    "description": "Object key: value block"
  },
  "Key ... value": {
    "prefix": "kv",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": ["\"${1:key}\": ${2:value},"],
    "description": "key => value statement"
  },
  "rfc": {
    "prefix": "rfc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "$0"
    ]
  },
  "rafc": {
    "prefix": "rafc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      "$0"
    ]
  },

  "bash skeleton": {
    "prefix": "init",
    "scope": "bash,shell,shellscript",
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -eo pipefail",
      "",
      "trap 'exit 1' SIGUSR1",
      "",
      "# ----  Main script logic ---- #",
      "",
      "$0"
    ]
  },
  "cmdarg": {
    "prefix": "cmdarg",
    "scope": "bash,shell,shellscript",
    "body": "source cmdarg.sh",
    "description": "source cmdarg library"
  },
  "Required Argument": {
    "prefix": "required_arg",
    "scope": "bash,shell,shellscript",
    "body": ["cmdarg \"${1:short}:\" \"${2:long}\" \"${0:description}\""]
  },
  "Optional Argument": {
    "prefix": "optional_arg",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg \"${1:short}?\" \"${2:long}\" \"${3:description}\" \"${0:default}\""
    ]
  },
  "Boolean Argument": {
    "prefix": "boolean_arg",
    "scope": "bash,shell,shellscript",
    "body": ["cmdarg \"${1:short}\" \"${2:long}\" \"${0:description}\""]
  },
  "Argument": {
    "prefix": "argument",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg \"${1:short}\" \"${2:long}\" \"${3:description}\" \"${0:default}\""
    ]
  },
  "Access Arg": {
    "prefix": "getarg",
    "scope": "bash,shell,shellscript",
    "body": "\\$\\{cmdarg_cfg[\"${0:key}\"]\\}"
  },
  "info": {
    "prefix": "cmdarg_info",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg_info \"header\" \"${1:Some script that needed argument parsing}\"",
      "cmdarg_info \"author\" \"${2:Some Poor Bastard <somepoorbastard@hell.com>}\"",
      "cmdarg_info \"copyright\" \"${3:(C) 2013}\""
    ]
  },
  "header": {
    "prefix": "cmdarg_info",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg_info \"header\" \"${1:Some script that needed argument parsing}\""
    ]
  },
  "parseargs": {
    "prefix": "parse_arg",
    "scope": "bash,shell,shellscript",
    "body": "cmdarg_parse \"\\$@\"",
    "description": "parse the args"
  },
  "full cmdarg": {
    "prefix": "fcmdarg",
    "scope": "bash,shell,shellscript",
    "body": [
      "# ---- Source the cmdarg script ---- #",
      "source cmdarg.sh",
      "",
      "# ----  Main script logic ---- #",
      "",
      "cmdarg_info \"header\" \"${1:description}\"",
      "",
      "# ----  Define arguments ---- #",
      "cmdarg \"${2:short}\" \"${3:long}\" \"${4:description}\" \"${5:default}\"",
      "",
      "# ----  Parse the arguments ---- #",
      "cmdarg_parse \"\\$@\"",
      "",
      "\\$\\{cmdarg_cfg[\"${3:key}\"]\\}",
      "$0"
    ]
  },
  "Define pageProps Interface in typescript": {
    "scope": "typescript,vue",
    "prefix": "iprops",
    "body": ["interface IProps {", "\t${1:key}: ${2:type};", "}", ""],
    "description": "Defines the props interface"
  },
  "import": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}';$0",
    "description": "Imports entire module statement in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importNoModuleName": {
    "prefix": "imn",
    "body": "import '${1:module}';$0",
    "description": "Imports entire module in ES6 syntax without module name",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importDestructing": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}';$0",
    "description": "Imports only a portion of the module in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importEverything": {
    "prefix": "ime",
    "body": "import * as ${2:alias} from '${1:module}';$0",
    "description": "Imports everything as alias from the module in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "importAs": {
    "prefix": "ima",
    "body": "import { ${2:originalName} as ${3:alias} } from '${1:module}';$0",
    "description": "Imports a specific portion of the module by assigning a local alias in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "require": {
    "prefix": "rqr",
    "body": "require('${1:package}');",
    "description": "Require a package",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "requireToConst": {
    "prefix": "req",
    "body": "const ${1:packageName} = require('${1:package}');$0",
    "description": "Require a package to const",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "moduleExports": {
    "prefix": "mde",
    "body": "module.exports = {\n\t$0\n};\n",
    "description": "Module exports from Common JS, node syntax at ES6",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportNamedVariable": {
    "prefix": "env",
    "body": "export const ${1:exportVariable} = ${2:localVariable};\n",
    "description": "Export named variable in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportNamedFunction": {
    "prefix": "enf",
    "body": "export const ${1:functionName} = (${2:params}) => {\n\t$0\n};\n",
    "description": "Export named function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportDefaultFunction": {
    "prefix": "edf",
    "body": "export default function ${1:${TM_FILENAME_BASE}}(${2:params}) {\n\t$0\n};\n",
    "description": "Export default function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportClass": {
    "prefix": "ecl",
    "body": "export default class ${1:className} {\n\t$0\n};\n",
    "description": "Export default class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "exportClassExtends": {
    "prefix": "ece",
    "body": "export default class ${1:className} extends ${2:baseclassName} {\n\t$0\n};\n",
    "description": "Export default class which extends a base one in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "constructor": {
    "prefix": "con",
    "body": "constructor(${1:params}) {\n\t${0}\n}",
    "description": "Add default constructor in a class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "method": {
    "prefix": "met",
    "body": "${1:methodName}(${2:params}) {\n\t${0}\n}",
    "description": "Creates a method inside a class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "propertyGet": {
    "prefix": "pge",
    "body": "get ${1:propertyName}() {\n\treturn this.${0};\n}",
    "description": "Creates a getter property inside a class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "propertyset": {
    "prefix": "pse",
    "body": "set ${1:propertyName}(${2:value}) {\n\t${0};\n}",
    "description": "Creates a setter property inside a class in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "forEachShort": {
    "prefix": "fre",
    "body": "${1:array}.forEach(${2:currentItem} => {\n\t${0}\n});",
    "description": "Creates a forEach statement in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "forOf": {
    "prefix": "fof",
    "body": "for (const ${1:item} of ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property names of iterable objects",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "forIn": {
    "prefix": "fin",
    "body": "for (const ${1:item} in ${2:object}) {\n\t${0}\n}",
    "description": "Iterating over property values of iterable objects",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "anonymousFunction": {
    "prefix": "anfn",
    "body": "(${1:params}) => {\n\t${2}\n}",
    "description": "Creates an anonymous function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "namedFunction": {
    "prefix": "nfn",
    "body": "const ${1:name} = (${2:params}) => {\n\t${3}\n}",
    "description": "Creates a named function in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructingObject": {
    "prefix": "dob",
    "body": "const {${2:propertyName}} = ${1:objectToDestruct};",
    "description": "Creates and assigns a local variable using object destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "destructingArray": {
    "prefix": "dar",
    "body": "const [${2:propertyName}] = ${1:arrayToDestruct};",
    "description": "Creates and assigns a local variable using array destructing",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setIntervalShort": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${2}\n}, ${0:intervalInms});",
    "description": "Executes the given function at specified intervals in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${2}\n}, ${1:delayInms});",
    "description": "Executes the given function after the specified delay in ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "promise": {
    "prefix": "prom",
    "body": "return new Promise((resolve, reject) => {\n\t${1}\n});",
    "description": "Creates and returns a new Promise in the standard ES6 syntax",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "thenCatch": {
    "prefix": "thenc",
    "body": ".then((${1:result}) => {\n\t${2}\n}).catch((${3:err}) => {\n\t${4}\n});",
    "description": "Add the .then and .catch methods to handle promises",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleAssert": {
    "prefix": "cas",
    "body": "console.assert(${1:expression}, ${2:object});",
    "description": "If the specified expression is false, the message is written to the console along with a stack trace",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleClear": {
    "prefix": "ccl",
    "body": "console.clear();",
    "description": "Clears the console",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleCount": {
    "prefix": "cco",
    "body": "console.count(${1:label});",
    "description": "Writes the the number of times that count() has been invoked at the same line and with the same label",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleDebug": {
    "prefix": "cdb",
    "body": "console.debug(${1:object});",
    "description": "Displays a message in the console. Also display a blue right arrow icon along with the logged message in Safari",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleDir": {
    "prefix": "cdi",
    "body": "console.dir(${1:object});",
    "description": "Prints a JavaScript representation of the specified object",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleError": {
    "prefix": "cer",
    "body": "console.error(${1:object});",
    "description": "Displays a message in the console and also includes a stack trace from where the method was called",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleGroup": {
    "prefix": "cgr",
    "body": "console.group('${1:label}');",
    "description": "Groups and indents all following output by an additional level, until console.groupEnd() is called.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleGroupEnd": {
    "prefix": "cge",
    "body": "console.groupEnd();",
    "description": "Closes out the corresponding console.group().",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleLog": {
    "prefix": "clg",
    "body": "console.log(${1:object});",
    "description": "Displays a message in the console",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleLogObject": {
    "prefix": "clo",
    "body": "console.log('${1:object} :>> ', ${1:object});",
    "description": "Displays an object in the console with its name",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleTrace": {
    "prefix": "ctr",
    "body": "console.trace(${1:object});",
    "description": "Prints a stack trace from the point where the method was called",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleWarn": {
    "prefix": "cwa",
    "body": "console.warn(${1:object});",
    "description": "Displays a message in the console but also displays a yellow warning icon along with the logged message",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleInfo": {
    "prefix": "cin",
    "body": "console.info(${1:object});",
    "description": "Displays a message in the console but also displays a blue information icon along with the logged message",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleTable": {
    "prefix": "clt",
    "body": "console.table(${1:object});",
    "description": "Displays tabular data as a table.",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleTime": {
    "prefix": "cti",
    "body": "console.time(${1:object});",
    "description": "Sets starting point for execution time measurement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "consoleTimeEnd": {
    "prefix": "cte",
    "body": "console.timeEnd(${1:object});",
    "description": "Sets end point for execution time measurement",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "console.dir": {
    "prefix": "cd",
    "body": ["console.dir($1);"],
    "description": "Code snippet for \"console.dir\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "console.error": {
    "prefix": "ce",
    "body": ["console.error($1);"],
    "description": "Code snippet for \"console.error\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "console.info": {
    "prefix": "ci",
    "body": ["console.info($1);"],
    "description": "Code snippet for \"console.info\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "console.log": {
    "prefix": "cl",
    "body": ["console.log($1);"],
    "description": "Code snippet for \"console.log\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "console.warn": {
    "prefix": "cw",
    "body": ["console.warn($1);"],
    "description": "Code snippet for \"console.warn\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "debugger": {
    "prefix": "de",
    "body": ["debugger;$1"],
    "description": "Code snippet for \"debugger\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "addEventListener": {
    "prefix": "ae",
    "body": [
      "${1:document}.addEventListener('${2:load}', function (e) {",
      "  ${3:// body}",
      "});"
    ],
    "description": "Code snippet for \"addEventListener\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "appendChild": {
    "prefix": "ac",
    "body": ["${1:document}.appendChild(${2:elem});"],
    "description": "Code snippet for \"appendChild\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "removeChild": {
    "prefix": "rc",
    "body": ["${1:document}.removeChild(${2:elem});"],
    "description": "Code snippet for \"removeChild\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "createElement": {
    "prefix": "cel",
    "body": ["${1:document}.createElement(${2:elem});"],
    "description": "Code snippet for \"createElement\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "createDocumentFragment": {
    "prefix": "cdf",
    "body": ["${1:document}.createDocumentFragment();$2"],
    "description": "Code snippet for \"createDocumentFragment\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "classList.add": {
    "prefix": "ca",
    "body": ["${1:document}.classList.add('${2:class}');"],
    "description": "Code snippet for \"classList.add\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "classList.toggle": {
    "prefix": "ct",
    "body": ["${1:document}.classList.toggle('${2:class}');"],
    "description": "Code snippet for \"classList.toggle\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "classList.remove": {
    "prefix": "cr",
    "body": ["${1:document}.classList.remove('${2:class}');"],
    "description": "Code snippet for \"classList.remove\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getElementById": {
    "prefix": "gi",
    "body": ["${1:document}.getElementById('${2:id}');"],
    "description": "Code snippet for \"getElementById\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getElementsByClassName": {
    "prefix": "gc",
    "body": ["${1:document}.getElementsByClassName('${2:class}');"],
    "description": "Code snippet for \"getElementsByClassName\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getElementsByTagName": {
    "prefix": "gt",
    "body": ["${1:document}.getElementsByTagName('${2:tag}');"],
    "description": "Code snippet for \"getElementsByTagName\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "getAttribute": {
    "prefix": "ga",
    "body": ["${1:document}.getAttribute('${2:attr}');"],
    "description": "Code snippet for \"getAttribute\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setAttribute": {
    "prefix": "sa",
    "body": ["${1:document}.setAttribute('${2:attr}', ${3:value});"],
    "description": "Code snippet for \"setAttribute\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "removeAttribute": {
    "prefix": "ra",
    "body": ["${1:document}.removeAttribute('${2:attr}');"],
    "description": "Code snippet for \"removeAttribute\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "innerHTML": {
    "prefix": "ih",
    "body": ["${1:document}.innerHTML = '${2:elem}';"],
    "description": "Code snippet for \"innerHTML\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "textContent": {
    "prefix": "tc",
    "body": ["${1:document}.textContent = '${2:content}';"],
    "description": "Code snippet for \"textContent\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "querySelector": {
    "prefix": "qs",
    "body": ["${1:document}.querySelector('${2:selector}');"],
    "description": "Code snippet for \"querySelector\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "querySelectorAll": {
    "prefix": "qsa",
    "body": ["${1:document}.querySelectorAll('${2:selector}');"],
    "description": "Code snippet for \"querySelectorAll\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "forEach": {
    "prefix": "fe",
    "body": ["${1:array}.forEach(function(item) {", "  ${2:// body}", "});"],
    "description": "Code snippet for \"forEach\"",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function": {
    "prefix": "fn",
    "body": [
      "function ${1:methodName} (${2:arguments}) {",
      "  ${3:// body}",
      "}"
    ],
    "description": "Code snippet for function",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "anonymous function": {
    "prefix": "afn",
    "body": ["function(${1:arguments}) {", "  ${2:// body}", "}"],
    "description": "Code snippet for anonymous function",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "prototype": {
    "prefix": "pr",
    "body": [
      "${1:object}.prototype.${2:method} = function(${3:arguments}) {",
      "  ${4:// body}",
      "}"
    ],
    "description": "Code snippet for prototype",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "immediately-invoked function expression": {
    "prefix": "iife",
    "body": [
      "(function(${1:window}, ${2:document}) {",
      "  ${3:// body}",
      "})(${1:window}, ${2:document});"
    ],
    "description": "Code snippet for immediately-invoked function expression",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function call": {
    "prefix": "call",
    "body": ["${1:method}.call(${2:context}, ${3:arguments});"],
    "description": "Code snippet for function call",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function apply": {
    "prefix": "apply",
    "body": ["${1:method}.apply(${2:context}, [${3:arguments}]);"],
    "description": "Code snippet for function apply",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "function as a property of an object": {
    "prefix": "ofn",
    "body": [
      "${1:functionName}: function(${2:arguments}) {",
      "  ${3:// body}",
      "}"
    ],
    "description": "Code snippet for function as a property of an object",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "JSON.parse": {
    "prefix": "jp",
    "body": ["JSON.parse(${1:obj});"],
    "description": "Code snippet for 'JSON.parse'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "JSON.stringify": {
    "prefix": "js",
    "body": ["JSON.stringify(${1:obj});"],
    "description": "Code snippet for 'JSON.stringify'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setInterval": {
    "prefix": "si",
    "body": ["setInterval(function() {", "  ${0:// body}", "}, ${1:1000});"],
    "description": "Code snippet for 'setInterval'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "setTimeout": {
    "prefix": "st",
    "body": ["setTimeout(function() {", "  ${0:// body}", "}, ${1:1000});"],
    "description": "Code snippet for 'setTimeout'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "use strict": {
    "prefix": "us",
    "body": ["'use strict';"],
    "description": "Code snippet for 'use strict'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "alert": {
    "prefix": "al",
    "body": ["alert('${1:msg}');"],
    "description": "Code snippet for 'alert'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "confirm": {
    "prefix": "co",
    "body": ["confirm('${1:msg}');"],
    "description": "Code snippet for 'confirm'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  },
  "prompt": {
    "prefix": "pm",
    "body": ["prompt('${1:msg}');"],
    "description": "Code snippet for 'prompt'",
    "scope": "javascript,javascriptreact,typescript,typescriptreact"
  }
}
