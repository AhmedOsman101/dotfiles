{
  "comment": {
    "prefix": "comment",
    "body": ["$LINE_COMMENT --- ${1:comment} --- $LINE_COMMENT"],
    "description": "Adds a nicely formatted comment"
  },
  "Multiline Comment": {
    "prefix": "mcomment",
    "body": ["$BLOCK_COMMENT_START", "\t${0:comment}", "$BLOCK_COMMENT_END"],
    "description": "Adds a nicely formatted multiline comment"
  },
  "Todo Comment": {
    "prefix": "todo",
    "body": ["$LINE_COMMENT TODO: $0"],
    "description": "Adds a nicely formatted todo comment"
  },
  "Fixme Comment": {
    "prefix": "fixme",
    "body": ["$LINE_COMMENT FIXME: $0"],
    "description": "Adds a nicely formatted fixme comment"
  },
  "Alert Comment": {
    "prefix": "alert",
    "body": ["$LINE_COMMENT!: $0"],
    "description": "Adds a nicely formatted alert comment"
  },
  "Note Comment": {
    "prefix": "note",
    "body": ["$LINE_COMMENT NOTE: $0"],
    "description": "Adds a nicely formatted note comment"
  },
  "Query Comment": {
    "prefix": "query",
    "body": ["$LINE_COMMENT ?: $0"],
    "description": "Adds a nicely formatted query comment"
  },
  "Deprecated Comment": {
    "prefix": "deprecated",
    "body": ["$LINE_COMMENT DEPRECATED: $0"],
    "description": "Adds a nicely formatted deprecated comment"
  },
  "Array": {
    "prefix": "array",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python,php",
    "body": ["[ ${1:value}, ${2:value}, $3 ];"],
    "description": "Array []"
  },
  "array": {
    "prefix": "array",
    "scope": "c,cpp",
    "body": ["{ ${1:value}, ${2:value}, $3 };"],
    "description": "Array {}"
  },
  "Array ... value": {
    "prefix": "value",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python,c,cpp,cs,php",
    "body": ["${1:value}, "],
    "description": "Array value statement"
  },
  "If block": {
    "prefix": "if",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["if (${1:condition}) {", "\t${0:// code...}", "}"],
    "description": "If  block"
  },
  "If single line": {
    "prefix": "sif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["if (${1:condition}) ${2:code}"],
    "description": "If single line"
  },
  "If ... else": {
    "prefix": "ifelse",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If else block"
  },
  "If ... else single line": {
    "prefix": "sifelse",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else (${3:condition}) ${4:code}"
    ],
    "description": "If ... else single line"
  },
  "If ... elseif ... else": {
    "prefix": "ifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) {",
      "\t${2:// code...}",
      "} else if (${3:condition}) {",
      "\t${4:// code...}",
      "} else {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "If elseif else block"
  },
  "If ... elseif ... else single line": {
    "prefix": "sifelif",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "if (${1:condition}) ${2:code}",
      "else if (${3:condition}) ${4:code}",
      "else (${5:condition}) ${6:code}"
    ],
    "description": "If ... elseif ... else single line"
  },
  "Switch block": {
    "prefix": "switch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": [
      "switch (${1:variable}) {",
      "\tcase ${2:label}:",
      "\t\t${3:// code...}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${0:// code...}",
      "\t\tbreak;",
      "}"
    ],
    "description": "Switch block"
  },
  "Case statement": {
    "prefix": "case",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["case ${1:label}:", "\t${2:// code...}", "\t${3|break,return|};"],
    "description": "Case addon block"
  },
  "Ternary operator": {
    "prefix": "ternary",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["${1:condition} ? ${2:if_true} : ${3:if_false};"],
    "description": "Ternary statement"
  },

  "Try ... catch": {
    "prefix": "trycatch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}"
    ],
    "description": "Try catch block"
  },
  "Try ... catch ... finally": {
    "prefix": "tryfinally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": [
      "try {",
      "\t${1:// code...}",
      "} catch (${2:e}) {",
      "\t${3:// code...}",
      "}$5 finally {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "Try catch finally block"
  },
  "Catch": {
    "prefix": "catch",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["catch (${2:e}) {", "\t${3:// code...}", "}"],
    "description": "Catch block"
  },
  "Finally": {
    "prefix": "finally",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["finally {", "\t${0:// code...}", "}"],
    "description": "Finally block"
  },
  "Throw new Exception": {
    "prefix": "throw",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,php",
    "body": ["throw new ${1:Exception}(\"${2:Error statement}\");"],
    "description": "Throw new exception statement"
  },
  "function": {
    "prefix": "function",
    "scope": "c,cpp,cs",
    "body": ["", "${1:void} ${2:functionName}($3) {", "\t${0://body}", "}"]
  },
  "arrow function": {
    "prefix": "arrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["(${1:param}) => {", "\t${0://body}", "}"]
  },
  "const arrow function": {
    "prefix": "carrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["const ${1:method} = (${2:param}) => {", "\t${0://body}", "}"]
  },
  "const async arrow function": {
    "prefix": "csarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export const arrow function": {
    "prefix": "xarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const ${1:method} = (${2:param}) => {",
      "\t${0://body}",
      "}"
    ]
  },
  "export deafult const arrow function": {
    "prefix": "darrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export deafult const async arrow function": {
    "prefix": "dsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export const async arrow function": {
    "prefix": "xsarrow",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "export const ${1:method} = async (${2:param}) => {",
      "\t${0://body}",
      "}",
      "",
      "export default ${1:method};",
      ""
    ]
  },
  "export deafult constant": {
    "prefix": "dcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["const ${1:var} = $2;", "", "export default ${1:var};", ""]
  },
  "export constant": {
    "prefix": "xcon",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": ["export const $1 = $2;", ""]
  },
  "watercss cdn": {
    "scope": "vue,html,blade",
    "prefix": "water",
    "body": [
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/water.css@2/out/${1|dark,light,water|}.css\"",
      "/>"
    ],
    "description": "watercss cdn, options water, dark, light"
  },
  "pico css cdn": {
    "scope": "vue,html,blade",
    "prefix": "pico",
    "body": [
      "<meta name=\"color-scheme\" content=\"light dark\">",
      "<link",
      "\trel=\"stylesheet\"",
      "\thref=\"https://cdn.jsdelivr.net/npm/@picocss/pico@2/css/pico.min.css\"",
      "/>"
    ],
    "description": "pico css cdn"
  },
  "For loop": {
    "prefix": "for",
    "scope": "c,cpp,cs",
    "body": [
      "for (${1:int} ${2:i} = ${3:0}; ${2:i} < ${4:n}; ${2:i}++) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "For Loop": {
    "prefix": "for",
    "scope": "javascript,javascriptreact,typescript,typescriptreact",
    "body": [
      "for (let ${1:i} = ${2:0}; ${3:condition}; ${1:i}${4:++}) {",
      "\t${0:// code...}",
      "}"
    ],
    "description": "For loop"
  },
  "While loop": {
    "prefix": "while",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["while (${1:condition}) {", "\t${0:// code...}", "}"],
    "description": "While loop"
  },
  "Do ... while": {
    "prefix": "dowhile",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,c,cpp,cs,php",
    "body": ["do {", "\t${0:// code...}", "} while (${1:condition})"],
    "description": "Do while loop"
  },
  "Object key ... value": {
    "prefix": "obj",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": [
      "{",
      "\t\"${1:key}\": ${2:value},",
      "\t\"${3:key}\": ${4:value},$5",
      "}"
    ],
    "description": "Object key: value block"
  },
  "Key ... value": {
    "prefix": "kv",
    "scope": "javascript,javascriptreact,typescript,typescriptreact,python",
    "body": ["\"${1:key}\": ${2:value},"],
    "description": "key => value statement"
  },
  "rfc": {
    "prefix": "rfc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "export default function ${1:${TM_FILENAME_BASE}} () {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "$0"
    ]
  },
  "rafc": {
    "prefix": "rafc",
    "scope": "javascriptreact,typescriptreact",
    "body": [
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "\treturn (",
      "\t\t<>",
      "\t\t\t<div>${1:${TM_FILENAME_BASE}}</div>",
      "\t\t</>",
      "\t);",
      "}",
      "",
      "export default ${1:${TM_FILENAME_BASE}};",
      "$0"
    ]
  },

  "bash skeleton": {
    "prefix": "init",
    "scope": "bash,shell,shellscript",
    "body": [
      "#!/usr/bin/env bash",
      "",
      "set -eo pipefail",
      "",
      "trap 'exit 1' SIGUSR1",
      "",
      "# ----  Main script logic ---- #",
      "",
      "$0"
    ]
  },
  "cmdarg": {
    "prefix": "cmdarg",
    "scope": "bash,shell,shellscript",
    "body": "source cmdarg.sh",
    "description": "source cmdarg library"
  },
  "Required Argument": {
    "prefix": "required_arg",
    "scope": "bash,shell,shellscript",
    "body": ["cmdarg \"${1:short}:\" \"${2:long}\" \"${0:description}\""]
  },
  "Optional Argument": {
    "prefix": "optional_arg",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg \"${1:short}?\" \"${2:long}\" \"${3:description}\" \"${0:default}\""
    ]
  },
  "Boolean Argument": {
    "prefix": "boolean_arg",
    "scope": "bash,shell,shellscript",
    "body": ["cmdarg \"${1:short}\" \"${2:long}\" \"${0:description}\""]
  },
  "Argument": {
    "prefix": "argument",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg \"${1:short}\" \"${2:long}\" \"${3:description}\" \"${0:default}\""
    ]
  },
  "Access Arg": {
    "prefix": "getarg",
    "scope": "bash,shell,shellscript",
    "body": "\\$\\{cmdarg_cfg[\"${0:key}\"]\\}"
  },
  "info": {
    "prefix": "cmdarg_info",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg_info \"header\" \"${1:Some script that needed argument parsing}\"",
      "cmdarg_info \"author\" \"${2:Some Poor Bastard <somepoorbastard@hell.com>}\"",
      "cmdarg_info \"copyright\" \"${3:(C) 2013}\""
    ]
  },
  "header": {
    "prefix": "cmdarg_info",
    "scope": "bash,shell,shellscript",
    "body": [
      "cmdarg_info \"header\" \"${1:Some script that needed argument parsing}\""
    ]
  },
  "parseargs": {
    "prefix": "help",
    "scope": "bash,shell,shellscript",
    "body": "cmdarg_parse \"\\$@\"",
    "description": "parse the args"
  },
  "full cmdarg": {
    "prefix": "fcmdarg",
    "scope": "bash,shell,shellscript",
    "body": [
      "# ---- Source the cmdarg script ---- #",
      "source cmdarg.sh",
      "",
      "# ----  Main script logic ---- #",
      "",
      "cmdarg_info \"header\" \"${1:description}\"",
      "",
      "# ----  Define arguments ---- #",
      "cmdarg \"${2:short}\" \"${3:long}\" \"${4:description}\" \"${5:default}\"",
      "",
      "# ----  Parse the arguments ---- #",
      "cmdarg_parse \"\\$@\"",
      "",
      "\\$\\{cmdarg_cfg[\"${3:key}\"]\\}",
      "$0"
    ]
  },
  "Define pageProps Interface in typescript": {
    "scope": "typescript,vue",
    "prefix": "iprops",
    "body": ["interface IProps {", "\t${1:key}: ${2:type};", "}", ""],
    "description": "Defines the props interface"
  }
}
