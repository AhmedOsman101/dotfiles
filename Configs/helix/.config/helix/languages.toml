indent = { tab-width = 2, unit = "  " }

# ---- C ---- #
[[language]]
name = "c"
language-servers = ["clangd", "scls"]
formatter = { command = "astyle" }

# ---- C++ ---- #
[[language]]
name = "cpp"
language-servers = ["clangd", "scls"]
formatter = { command = "astyle" }

# ---- Bash ---- #
[[language]]
name = "bash"
language-servers = ["bash-language-server", "scls"]

# ---- HTML ---- #
[[language]]
name = "html"
roots = [".git"]
language-servers = ["vscode-html-language-server", "superhtml", "emmet-lsp"]
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.html",
] }


# ---- PHP ---- #
[[language]]
name = "php"
language-servers = [
  "intelephense",
  "scls",
  # "php-lsp",
]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "phpfmt" }

# ---- Json ---- #
[[language]]
name = "json"
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.json",
] }
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
  "scls",
]
file-types = [
  "json",
  "arb",
  "ipynb",
  "geojson",
  "gltf",
  "webmanifest",
  { glob = "flake.lock" },
  { glob = ".babelrc" },
  { glob = ".bowerrc" },
  { glob = ".jscrc" },
  "js.map",
  "ts.map",
  "css.map",
  { glob = ".jslintrc" },
  "jsonl",
  "jsonld",
  { glob = ".vuerc" },
  { glob = "composer.lock" },
  { glob = ".watchmanconfig" },
  "avsc",
  "ldtk",
  "ldtkl",
  { glob = ".swift-format" },
  "sublime-build",
  "sublime-color-scheme",
  "sublime-commands",
  "sublime-completions",
  "sublime-keymap",
  "sublime-macro",
  "sublime-menu",
  "sublime-mousemap",
  "sublime-project",
  "sublime-settings",
  "sublime-theme",
  "sublime-workspace",
  "code-snippets",
]

# ---- Typescript ---- #
[[language]]
name = "typescript"
roots = ["deno.json", "deno.jsonc", "package.json"]
auto-format = false
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.ts",
] }
language-servers = [
  "deno-lsp",
  "biome",
  "scls",
  # { name = "typescript-language-server", except-features = [
  #   "format",
  # ] },
]

# ---- Javascript ---- #
[[language]]
name = "javascript"
roots = ["deno.json", "deno.jsonc", "package.json"]
auto-format = false
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.js",
] }
language-servers = [
  "deno-lsp",
  "biome",
  "scls",
  # { name = "typescript-language-server", except-features = [
  #   "format",
  # ] },
]


# ---- Jsx ---- #
[[language]]
name = "jsx"
roots = ["deno.json", "deno.jsonc"]
auto-format = false
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.jsx",
] }
language-servers = [
  "deno-lsp",
  "biome",
  "scls",
  "vscode-html-language-server",
  "superhtml",
  # { name = "typescript-language-server", except-features = [
  #   "format",
  # ] },
]

# ---- Tsx ---- #
[[language]]
name = "tsx"
roots = ["deno.json", "deno.jsonc"]
auto-format = false
formatter = { command = "biome", args = [
  "check",
  "--fix",
  "--config-path",
  "/home/othman/.config/biome/biome.json",
  "--stdin-file-path=file.tsx",
] }
language-servers = [
  "deno-lsp",
  "biome",
  "scls",
  "vscode-html-language-server",
  "superhtml",
  # { name = "typescript-language-server", except-features = [
  #   "format",
  # ] },
]

# ---- Deno LSP ---- #
[language-server.deno-lsp]
command = "deno"
args = ["lsp"]
config.deno.enable = true

# ---- PHP LSP ---- #
# [language-server.php-lsp]
# command = "/home/othman/.local/bin/devsense.php.ls"

# ---- Biome LSP ---- #
[language-server]
biome = { command = "biome", args = ["lsp-proxy"] }
# --- ty --- #
ty = { command = "ty", args = ["server"] }

# ---- Rust---- #
[[language]]
name = "rust"
auto-format = true
formatter = { command = "rustfmt", args = [
  "--config-path",
  "/home/othman/.config/rustfmt.toml",
] }
language-servers = ["rust-analyzer", "scls"]
indent = { tab-width = 2, unit = "  " }

[language-server.rust-analyzer]
config = { checkOnSave = true, check = { command = "clippy" } }

# ---- JSON ---- #
[[language]]
name = "json"
language-servers = [
  { name = "vscode-json-language-server", except-features = [
    "format",
  ] },
  "biome",
  "scls",
]

# ---- Markdown ---- #
[[language]]
name = "markdown"
formatter = { command = "prettier", args = [
  "--write",
  "--config",
  "/home/othman/.config/.prettierrc.json",
  "--stdin-filepath",
  "file.md",
] }
language-servers = [
  # "marksman",
  "markdown-oxide",
  "scls",
]


# ---- Svelte ---- #
[[language]]
name = "svelte"
language-servers = [
  "biome",
  { name = "svelteserver", except-features = [
    "format",
  ] },
  "scls",
]

# --- Env --- #
[[language]]
name = "env"
file-types = [
  { glob = ".shellcheckrc" },
  { glob = ".env*" },
  { glob = ".env.*" },
  { glob = ".envrc" },
]
indent = { tab-width = 2, unit = "  " }

# ---- simple completion language server ---- #
[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 100          # set max completion results len for each group: words, snippets, unicode-input
feature_words = false               # enable completion by word
feature_snippets = true             # enable snippets
snippets_first = true               # completions will return before snippets by default
snippets_inline_by_word_tail = true # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_unicode_input = false       # enable "unicode input"
feature_paths = true                # enable path completion
feature_citations = false           # enable citation completion (only on `citation` feature enabled)


# write logs to /tmp/completion.log
[language-server.scls.environment]
RUST_LOG = "info,simple-completion-language-server=info"
LOG_FILE = "/tmp/completion.log"

# append language server to existed languages
[[language]]
name = "rust"
language-servers = ["scls", "rust-analyzer"]

[[language]]
name = "git-commit"
language-servers = ["scls"]

# introduce a new language to enable completion on any doc by forcing set language with :set-language stub
[[language]]
name = "stub"
scope = "text.stub"
file-types = []
shebangs = []
roots = []
auto-format = false
language-servers = ["scls"]

# --- Python --- #
[[language]]
name = "python"
# language-servers = ["ty", "scls"]
language-servers = ["ty", "scls", "pylsp"]
indent = { tab-width = 2, unit = "  " }
formatter = { command = "yapf" }

# ---- Helix-gpt ---- #
[language-server.gpt]
command = "helix-gpt"
args = [
  "--handler",
  "codeium",   # codeium,ollama,openai

  "--debounce",
  "200",

  "--ollamaModel",
  "qwen2.5-coder:0.5b",

]

# ---- Emmet LSP ---- #
[language-server.emmet-lsp]
command = "emmet-language-server"
args = ["--stdio"]

[[language]]
name = "ini"
scope = "source.ini"
file-types = [
  "ini",
  # Systemd unit files
  "service",
  "automount",
  "device",
  "mount",
  "path",
  "service",
  "slice",
  "socket",
  "swap",
  "target",
  "timer",
  # Podman quadlets
  "container",
  "volume",
  "kube",
  "network",
  { glob = ".editorconfig" },
  { glob = "rclone.conf" },
  "properties",
  "cfg",
  "directory",

  # === your specific .conf files or all ".conf" files ===
  # { glob = "some_file.conf" },
  # "conf",
]
injection-regex = "ini"
comment-token = "#"
indent = { tab-width = 2, unit = "  " }

[[grammar]]
name = "ini"
source = { git = "https://github.com/justinmk/tree-sitter-ini", rev = "0eaed8040513e62ee2e9e8db9f086cf630a524eb" }
