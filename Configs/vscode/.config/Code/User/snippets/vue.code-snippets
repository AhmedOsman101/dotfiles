{
  "init": {
    "scope": "vue",
    "isFileTemplate": true,
    "prefix": "init",
    "description": "Vue component skeleton",
    "body": [
      "<script setup lang=\"${1|ts,tsx,js,jsx|}\">",
      "// code",
      "</script>",
      "",
      "<template>",
      "\t<div>${2:${TM_FILENAME_BASE}}</div>",
      "</template>",
      "",
      "<style>",
      "/* code */",
      "</style>"
    ]
  },
  "Pinia Options Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-options",
    "body": [
      "import { defineStore, acceptHMRUpdate } from 'pinia'",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', {",
      " state: () => ({",
      "   $0",
      " }),",
      " getters: {},",
      " actions: {},",
      "})",
      "",
      "if (import.meta.hot) {",
      " import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      "}",
      ""
    ],
    "description": "Bootstrap the code needed for a Vue.js Pinia Options Store file"
  },
  "Pinia Setup Store Boilerplate": {
    "scope": "javascript,typescript",
    "prefix": "pinia-setup",
    "body": [
      "import { defineStore, acceptHMRUpdate } from 'pinia'",
      "",
      "export const use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store = defineStore('$TM_FILENAME_BASE', () => {",
      " $0",
      " return {}",
      "})",
      "",
      "if (import.meta.hot) {",
      " import.meta.hot.accept(acceptHMRUpdate(use${TM_FILENAME_BASE/^(.*)$/${1:/pascalcase}/}Store, import.meta.hot))",
      "}",
      ""
    ],
    "description": "Bootstrap the code needed for a Vue.js Pinia Setup Store file"
  },
  "Define props in typescript": {
    "scope": "typescript,vue",
    "prefix": "v-props",
    "body": ["const props = defineProps<{", "  $1: $2;", "$3", "}>();"],
    "description": "Defines a prop with typescript"
  },
  "Define props with defaults in typescript": {
    "scope": "typescript,vue",
    "prefix": "v-dprops",
    "body": [
      "const props = withDefaults(",
      "   defineProps<{",
      "\t\t$1: $2;",
      "   }>(),",
      "   { $1: $3 }",
      ");"
    ],
    "description": "Defines a prop with typescript"
  },
  "Define pageProps Interface in typescript": {
    "scope": "typescript,vue",
    "prefix": "iprops",
    "body": ["interface IProps {", "\t${1:key}: ${2:type};", "}", ""],
    "description": "Defines the props interface"
  }
}
