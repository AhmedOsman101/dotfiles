{
  "Class-Inherit": {
    "prefix": "ts-class-inherit",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "class Shape {",
      "  constructor(protected x: number, protected y: number) {}",
      "}",
      "",
      "class Movable extends Shape {",
      "  constructor(x: number, y: number) {",
      "    super(x, y);",
      "}",
      "",
      "  move(dx: number, dy: number) {",
      "    this.x += dx;",
      "    this.y += dy;",
      "  }",
      "}"
    ],
    "description": "this will create two classes, one class `Movable` inherits from `Shape`"
  },
  "Class": {
    "prefix": "ts-class",
    "scope": "typescript,typescriptreact,vue,svelte",

    "body": [
      "enum CharacterType { Warrior, Mage, Healer };",
      "",
      "class Character {",
      "  constructor(",
      "    private name: string,",
      "    private age: number,",
      "    private type: CharacterType",
      "  ) {}",
      "}"
    ],
    "description": "this will create a class with a constructor and backing fields"
  },
  "Class-Constructor": {
    "prefix": "ts-class-constructor",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "constructor(",
      "  private $1: string,",
      "  private $2: number,",
      "  private $3: CharacterType",
      ") {}"
    ],
    "description": "this will create a constructor and backing fields"
  },
  "Class-Getter": {
    "prefix": "ts-class-getter",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "private _$1:string",
      "get $1(): string {",
      "  return this._$1;",
      "}"
    ],
    "description": "this will create a getter"
  },
  "Class-Setter": {
    "prefix": "ts-class-setter",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "private _$1:string",
      "set $1(value): string {",
      "  this._$1= value;",
      "}"
    ],
    "description": "this will create a getter"
  },
  "Class-Setter-Getter": {
    "prefix": "ts-class-setter-getter",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "private _$1:string",
      "get $1(): string {",
      "  return this._$1;",
      "}",
      "set $1(value): string {",
      "  this._$1;= value",
      "}"
    ],
    "description": "this will create a getter"
  },
  "Interface": {
    "prefix": "ts-int",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": ["interface $1 {", " property: string;", "};"],
    "description": "this will create an interface"
  },
  "Interface impl": {
    "prefix": "ts-int-impl",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "interface Movable {",
      " move(x: number, y: number): void",
      "};",
      "class Hero implements Movable {",
      "  move(x:number, y: number) { /* impl me */  }"
    ],
    "description": "this will create an interface and a class implementing the interface"
  },
  "Template string": {
    "prefix": "ts-templ",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "const your_name = 'chris noring';",
      "const twitter = 'chris_noring'",
      "const str = `Hello my name is \\${your_name\\} and my twitter is \\${twitter\\}`"
    ],
    "description": "this will create a template string"
  },
  "Tuple": {
    "prefix": "ts-tuple",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "let tuple: [string, string]",
      "tuple = ['chris', 'noring']",
      "console.log(tuple[0]); // outputs 'chris'"
    ],
    "description": "this will create an Tuple"
  },
  "Enum": {
    "prefix": "ts-enum",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": ["enum ${1:Colors} {", "${2:Red}, ${3:Green}, ${4:Blue}", "}"],
    "description": "this will create an Enum"
  },
  "Generic class constraint": {
    "prefix": "ts-gen-class-constraint",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "class Hero { name='hero' }",
      "function factory<T>(classType: { new(): T }) {",
      "  return new classType();",
      "}",
      "factory(Hero).name; // 'hero'"
    ],
    "description": "Creates a function with a parameter that can be instantiated"
  },
  "Union type": {
    "prefix": "ts-union",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "type StringOrInt = string | number;",
      "const numberType: StringOrInt = 1;",
      "const stringType: StringOrInt = 'a string';",
      "const booleanType: StringOrInt = false;"
    ],
    "description": "Creates a union type and an example usage"
  },
  "Intersect type": {
    "prefix": "ts-intersect",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "function extend<T, U>(first: T, second: U): T & U {",
      "  let result = <T & U>{};",
      "  for (let id in first) {",
      "    (<any>result)[id] = (<any>first)[id];",
      "  }",
      "  for (let id in second) {",
      "      if (!result.hasOwnProperty(id)) {",
      "          (<any>result)[id] = (<any>second)[id];",
      "      }",
      "  }",
      "  return result;",
      "}",
      "",
      "class Warrior {",
      "  constructor(public name: string) { }",
      "}",
      "interface Magic {",
      "  castSpell(): void;",
      "}",
      "class Wizard implements Magic {",
      "  castSpell() {",
      "    console.log('wizard throws a Fireball')",
      "  }",
      "}",
      "var warrior = extend(new Warrior('Aragorn'), new Wizard());",
      "var warriorName = warrior.name;",
      "warrior.castSpell();"
    ],
    "description": "Creates an intersection type and a mixin function"
  },
  "Decorator": {
    "prefix": "ts-decorator",
    "scope": "typescript,typescriptreact,vue,svelte",
    "body": [
      "function color(value: string) {",
      "  return function (target) {",
      "      target.color = value;",
      "  }",
      "}",
      "",
      "@color('yellow')",
      "class Cube {",
      "  side = 3",
      "}",
      "",
      "const cube = new Cube();",
      "console.log( Cube['color'] );"
    ],
    "description": "Creates a decorator"
  }
}
